<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
        
    <!-- mapper interface 설정  scanner 매퍼 읽을 위치 정하기-->   
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
       <property name="basePackage" value="com.acorn.doma.mapper"></property>
    </bean>
        
    <!-- annotation 설정 
    base-package : com.pcwk.ehr 하위 모든것들을 읽겠다.
    -->
    
    
    <!-- jdbctemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>    
    </bean>
        
    <!-- sqlSessionTemplate -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
      <!-- mybatis-config.xml, mapper*.xml파일  -->
      <constructor-arg index="0" ref="sqlSessionFactoryBean"></constructor-arg>
    </bean> 
    
    <!--
    Mybatis config.xml
    mapper : user.xml, board.xml , ...
    -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- db연결 -->
        <property name="dataSource" ref="dataSource"></property>
        
        <!-- Mybatis config.xml 연결 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        
        <!-- mapper 파일 : mapper/**/*.xml -->
        <property name="mapperLocations" value="classpath:mapper/**/*.xml"></property>
        
    </bean>     
        
    <!-- 트랜잭션 Advice 설정 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
       <tx:attributes>
           <!-- 트랜잭션 적용 : up으로 시작하는 메서드에 적용한다.
           name: 트랜잭션 적용할 메서드 설정
           read-only : 읽기 전용 여부
           rollback-for : 트랜잭션을 롤백할 예외
           -->
           <tx:method name="*Tx" read-only="false" rollback-for="Exception"/>
           
           <!-- 트랜잭션 제외 : up으로 시작하지 않는 모든 메서드는 트랜잭션 제외 -->
           <tx:method name="*" read-only="true" />
       </tx:attributes>
    </tx:advice>
    
    <tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager" />
    
    <aop:config>
       <aop:pointcut expression="execution( * com.acorn.doma..service.*Impl.*Tx(..) )" id="txPointCut"/>
       <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
    </aop:config>
    
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- <property name="dataSource" ref="dataSource"></property> -->
        <constructor-arg index="0" ref="dataSource"></constructor-arg>
    </bean>
    
    <!-- HikariDataSource Bean -->
    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource">
        <!-- <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/> -->
        <property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
        <!-- <property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:xe"></property> -->
        <property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:xe"></property>
        <property name="username" value="scott"></property>
        <property name="password" value="0000"></property>
        
        <!--  Optional settings -->
        <property name="maximumPoolSize" value="10"></property>
        <property name="minimumIdle" value="5"></property>
        <property name="connectionTimeout" value="30000"></property>
        <property name="idleTimeout" value="600000"></property>
        <property name="maxLifetime" value="1800000"></property>
        
        <!--  
        - `maximumPoolSize`: 풀에 유지할 최대 연결 수입니다.
        - `minimumIdle`: 유휴 상태로 유지할 최소 연결 수입니다.
        - `connectionTimeout`: 연결 시도 시 타임아웃 설정입니다 (밀리초 단위).
        - `idleTimeout`: 유휴 연결이 풀에서 제거되기 전 대기 시간입니다 (밀리초 단위).
        - `maxLifetime`: 연결이 풀에서 제거되기 전 최대 생존 시간입니다 (밀리초 단위).        
        -->
    </bean>
    
  
    
</beans>
